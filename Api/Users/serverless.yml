service: Users-pn

plugins:
  - serverless-offline
  - serverless-plugin-warmup

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${file(../../commons/credentials.json):stage}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(../../commons/credentials.json):${self:provider.stage}.dbHost}
    DB_PORT: ${file(../../commons/credentials.json):${self:provider.stage}.dbPort}
    DB_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.dbPassword}
    DB_USER: ${file(../../commons/credentials.json):${self:provider.stage}.dbUser}
    DB_NAME: ${file(../../commons/credentials.json):${self:provider.stage}.dbName}
    IDENTITY: ${file(../../commons/credentials.json):${self:provider.stage}.IdentityPoolId}
    USER_POOL: ${file(../../commons/credentials.json):${self:provider.stage}.userPool}
    ACCESS_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.accessKeyId}
    SECRET_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.secretAccessKey}

package:
  include:
    - ../../commons/**
  exclude:
    - node_modules/**

functions:
  usersGet:
    warmup: true
    handler: handler.read
    timeout: 30
    events:
      - http:
          path: users
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersCreate:
    warmup: true
    handler: handler.create
    timeout: 30
    events:
      - http:
          path: users
          method: post
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersUpdate:
    warmup: true
    handler: handler.update
    timeout: 30
    events:
      - http:
          path: users/{user_id}
          method: put
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersDelete:
    warmup: true
    handler: handler.delete
    timeout: 30
    events:
      - http:
          path: users/{user_id}
          method: delete
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersDetail:
    warmup: true
    handler: handler.detail
    timeout: 30
    events:
      - http:
          path: users/{user_id}
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersPackages:
    warmup: true
    handler: handler.getPackagesUser
    timeout: 30
    events:
      - http:
          path: users/{user_id}/packages
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersProfile:
    warmup: true
    handler: handler.profile
    timeout: 30
    events:
      - http:
          path: users/profile
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  usersSearch:
    warmup: true
    handler: handler.search
    timeout: 30
    events:
      - http:
          path: search
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  UsersMigration:
    warmup: true
    handler: handler.migration
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  UserPostConfirmation:
    warmup: true
    handler: handler.postConfirmation
    events:
      - http:
          path: postConfirmation
          method: get
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

Resources:
  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
