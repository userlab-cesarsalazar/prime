service: reports-pn

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${file(../../commons/credentials.json):stage}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(../../commons/credentials.json):${self:provider.stage}.dbHost}
    DB_PORT: ${file(../../commons/credentials.json):${self:provider.stage}.dbPort}
    DB_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.dbPassword}
    DB_USER: ${file(../../commons/credentials.json):${self:provider.stage}.dbUser}
    DB_NAME: ${file(../../commons/credentials.json):${self:provider.stage}.dbName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:Invoke
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

package:
  include:
    - ../../commons/**
  exclude:
    - node_modules/**

functions:
  reports:
    handler: handler.reports
    timeout: 30
    events:
      - http:
          path: reports
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}


  entries:
    handler: handler.entries
    timeout: 30
    events:
      - http:
          path: reports/entries
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}


  route:
    handler: handler.route
    timeout: 30
    events:
      - http:
          path: reports/route
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  warehouse:
    handler: handler.warehouse
    timeout: 30
    events:
      - http:
          path: reports/warehouse
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}


  stateAccount:
    handler: handler.stateAccount
    timeout: 30
    events:
      - http:
          path: reports/stateAccount
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  byMaster:
    handler: handler.byMaster
    timeout: 30
    events:
      - http:
          path: reports/byMaster
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  byMastertotal:
    handler: handler.byMasterTotal
    timeout: 30
    events:
      - http:
          path: reports/byMasterTotal
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  byInvoices:
    handler: handler.byInvoices
    timeout: 30
    events:
      - http:
          path: reports/byInvoices
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  byConciliation:
    handler: handler.byConciliation
    timeout: 30
    events:
      - http:
          path: reports/byConciliation
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  byGuia:
    handler: handler.byGuia
    timeout: 30
    events:
      - http:
          path: reports/byGuia
          method: get
          cors:
            origin: '*'
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

