service: Invoice-pn

plugins:
  - serverless-offline
  - serverless-plugin-warmup

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${file(../../commons/credentials.json):stage}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(../../commons/credentials.json):${self:provider.stage}.dbHost}
    DB_PORT: ${file(../../commons/credentials.json):${self:provider.stage}.dbPort}
    DB_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.dbPassword}
    DB_USER: ${file(../../commons/credentials.json):${self:provider.stage}.dbUser}
    DB_NAME: ${file(../../commons/credentials.json):${self:provider.stage}.dbName}
    URL_DEV_FACT: ${file(../../commons/credentials.json):${self:provider.stage}.url_ecofactura_dev}
    URL_DEV_FACT_CANCEL: ${file(../../commons/credentials.json):${self:provider.stage}.url_ecofactura_dev_cancel}
    CLIENT_FACT_DEV: ${file(../../commons/credentials.json):${self:provider.stage}.fact_client_dev}
    USER_FACT_DEV: ${file(../../commons/credentials.json):${self:provider.stage}.fact_user_dev}
    PASSWORD_FACT_DEV_ID: ${file(../../commons/credentials.json):${self:provider.stage}.fact_password_dev}
    NIT_FACT_DEV: ${file(../../commons/credentials.json):${self:provider.stage}.fact_nit_dev}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:Invoke
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - ses:SendEmail
        - SNS:Publish
      Resource: "*"

package:
  include:
    - ../../commons/**
  exclude:
    - node_modules/**

functions:
  invoicesCreate:
    warmup: true
    handler: handler.create
    timeout: 30
    events:
      - http:
          path: invoices
          method: post
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
       - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getInvoices:
    warmup: true
    handler: handler.documents
    timeout: 30
    events:
      - http:
          path: invoices
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getInvoice:
    warmup: true
    handler: handler.document
    timeout: 30
    events:
      - http:
          path: invoices/{id}
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getPDF:
    warmup: true
    handler: handler.documentPDF
    timeout: 30
    events:
      - http:
          path: invoices/print/{id}
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  documentByClient:
    warmup: true
    handler: handler.documentByClient
    timeout: 30
    events:
      - http:
          path: invoices/client/{id}
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  documentCancel:
    warmup: true
    handler: handler.annul
    timeout: 30
    events:
      - http:
          path: invoices/{id}/cancel
          method: put
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  payments:
    warmup: true
    handler: handler.payments
    timeout: 30
    events:
      - http:
          path: payments
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  reconciliation:
    warmup: true
    handler: handler.updateReconciliation
    timeout: 30
    events:
      - http:
          path: reconciliation/{id}
          method: put
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getReconciliation:
    warmup: true
    handler: handler.reconciliation
    timeout: 30
    events:
      - http:
          path: reconciliation
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getStores:
    warmup: true
    handler: handler.getStores
    timeout: 30
    events:
      - http:
          path: stores
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

