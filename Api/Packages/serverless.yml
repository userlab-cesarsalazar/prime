service: Package-pn

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${file(../../commons/credentials.json):stage}
  region: us-east-1
  deploymentBucket:
    name: ${file(../../commons/credentials.json):${self:provider.stage}.deploymentBucket}

  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(../../commons/credentials.json):${self:provider.stage}.dbHost}
    DB_PORT: ${file(../../commons/credentials.json):${self:provider.stage}.dbPort}
    DB_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.dbPassword}
    DB_USER: ${file(../../commons/credentials.json):${self:provider.stage}.dbUser}
    DB_NAME: ${file(../../commons/credentials.json):${self:provider.stage}.dbName}
    ACCOUNT_ID: ${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}
    TIGO_USER: ${file(../../commons/credentials.json):${self:provider.stage}.tigoUsername}
    TIGO_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.tigoPassword}
    TIGO_API_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.ApiTipoKey}
    TIGO_SECRET_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.ApiTigoSecret}
    URL_TIGO: ${file(../../commons/credentials.json):${self:provider.stage}.urlTigo}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:Invoke
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - ses:SendEmail
        - SNS:Publish
      Resource: "*"

package:
  include:
    - ../../commons/**
  exclude:
    - node_modules/**

functions:
  packageGet:
    handler: handler.read
    timeout: 30
    events:
      - http:
          path: packages
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  packageDetail:
    handler: handler.detail
    timeout: 30
    events:
      - http:
          path: packages/{package_id}
          method: get
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  packageCreate:
    handler: handler.create
    timeout: 30
    events:
      - http:
          path: packages
          method: post
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  packageUpdate:
    handler: handler.update
    timeout: 30
    events:
      - http:
          path: packages/{package_id}
          method: put
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  packageDelete:
    handler: handler.delete
    timeout: 30
    events:
      - http:
          path: packages
          method: delete
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  packageTransfer:
    handler: handler.transfer
    timeout: 30
    events:
      - http:
          path: packages/transfer
          method: put
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  transferClient:
    handler: handler.transferClient
    timeout: 30
    events:
      - http:
          path: transfer/client
          method: put
          cors:
            origin: "*"
            allowCredentials: true
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  guide:
    handler: handler.guides
    timeout: 30
    events:
      - http:
          path: packages/guides
          method: post
          cors:
          origin: "*"
          allowCredentials: true
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  guideClose:
    handler: handler.closeGuides
    timeout: 30
    events:
      - http:
          path: packages/guides
          method: put
          cors:
          origin: "*"
          allowCredentials: true
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getGuides:
    handler: handler.getGuides
    timeout: 30
    events:
      - http:
          path: packages/guides
          method: get
          cors:
          origin: "*"
          allowCredentials: true
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  #sendMessagePrime:
  #  handler: handler.sendPrime
  #  timeout: 30
  #  events:
  #    - sns:
  #        topicName: sms-pn
  #        displayName: sms-pn
  #  layers:
  #    - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  sendMessageTigo:
    handler: handler.sendSMSTigo
    timeout: 30
    events:
      - sns:
          topicName: sms-${self:provider.stage}-tigo
          displayName: sms-${self:provider.stage}-tigo
      - http:
          path: packages/sms
          method: post
          cors:
          origin: "*"
          allowCredentials: true
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  getPackagesByManifestId:
    handler: handler.getPackagesByManifestId
    timeout: 30
    events:
      - http:
          path: packages/manifest/{manifest_id}
          method: get
          cors:
          origin: "*"
          allowCredentials: true
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:${file(../../commons/credentials.json):${self:provider.stage}.layer}

  sesBounds:
    handler: handler.sesTopic
    timeout: 30
